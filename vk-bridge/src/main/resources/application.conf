# Default config

ktor {
  deployment {
    port = ${LISTEN_PORT}
    host = ${LISTEN_HOST}

    homeserverUrl = ${HS_URL}
    hsToken = ${HS_TOKEN}
    asToken = ${AS_TOKEN}

    database {
      host = ${DATABASE_HOST}
      port = ${DATABASE_PORT}
      name = ${DATABASE}
      username = ${DATABASE_USERNAME}
      password = ${DATABASE_PASSWORD}
      pool {
        idleTimeMs = ${CONNECTION_IDLE_TIME_MS}
        maxSize = ${POOL_MAX_SIZE}
      }
    }
  }
  application {
    modules = [
      ru.herobrine1st.matrix.bridge.module.LoggingModuleKt.loggingModule
      ru.herobrine1st.matrix.bridge.module.DatabaseModuleKt.databaseModule
      ru.herobrine1st.matrix.bridge.module.TrixnityModuleKt.trixnityModule
    ]
  }
}

bridge {
  # Domain that is associated with your homeserver
  # You can extract it from your mxid: the server name for @user:example.org is example.org even if homeserver is at
  # matrix.example.org (thanks to well-known API!)
  homeserverDomain = ${HS_NAME}
  # The username for bridge bot which is used to help you setup this bridge.
  # This and homeserverName build the mxid for that bot, for example, @vk_bridge:example.com
  # Also "sender_localpart" in registration file
  botLocalpart = ${BOT_LOCALPART}
  # Username prefix for puppets created by this bridge
  puppetPrefix = ${PUPPET_PREFIX}
  roomAliasPrefix = ${ROOM_ALIAS_PREFIX}

  # TODO admin mxid?

  # Regexes for Matrix IDs allowed/denied to use the bridge
  # Blacklist is first. Both may be empty.
  provisioning {
    whitelist = [
      # Allow a specific user
      #"@user:server\\.com"
      # Allow users on a specific homeserver
      #"@.*:yourserver\\.com"
      # Allow anyone
      #".*"
    ]
    blacklist = [
      # Disallow a specific user
      #"@user:server\\.com"
      # Disallow users on a specific homeserver
      #"@.*:yourserver\\.com"
    ]
  }

  presence {
    # Enable VK online/offline status -> HS
    remote: false
    # Enable HS online/offline status -> VK
    local: false
  }


}

vk {
  # Static token list for this bridge
  tokens = [
    # {
    #   isUser: true # if true, this user is used for double-puppeted bridge.
    #   token: "" # VK token
    #   localUserId: "@user:example.com" # corresponding matrix user. May be omitted and will be ignored if `is_user` is false.
    #   remoteId: 1234 # corresponding VK user/group id
    # }
  ]

  apiServer = "https://api.vk.com"

  whitelist = [
    // peer id, negative for groups, positive for accounts and over 20 (or more idk) million for group chats
  ]

  migrate = [
    // currently for first actor only
    //{ mxid = "!roomid:example.com", room_id = peer_id, is_direct = true }
  ]

  # TODO spam protection (easy captcha, like "Solve 1+2")
}

ntfy {
  endpoint = ""
  token = ""
}